<html>
<head>
    <title>Configuration File Assets</title>
    <meta name="subtitle" content="Configuration File Assets" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster, Configuration" />
    <meta name="sequence" content="200" />
</head>
<body>

    <p class="announcement">Configuration File Assets are an advanced feature. As of BuildMaster v5.8, <a href="/support/documentation/buildmaster/modeling-applications/configuration-files-text-templates">Configuration File Text Templates</a> 
    are the simplest mechanism to handle configuration file deployments.</p>

    <p>Configuration file assets are intended to represent application configuration files that are deployed side-by-side with a release package. Common examples include the web.config file in .NET or a .properties file in Java.</p>
    <p>Configuration files are treated as assets and are independent from other files in a deployment artifact because their contents may be orthogonal to the application itself or contain environment-specific data such as database connection strings, third-party service URLs, versioning information, etc.</p>
    
    <h2 id="naming">Naming</h2>
    <p>Configuration files should be named after the file they represent, e.g. web.config. These names are unique per application. In cases where there may be multiple files with the same name within an application, aliases may be used to uniquely identify them in the UI. When deploying a non-unique configuration file, make sure to specify the name of the output file directly.</p>
    
    <h2 id="instances-and-versions">Instances and Versions</h2>
    <p>Each configuration file contains at least one instance, and instances may be associated with an environment. A configuration file is versioned as a whole – meaning any changes made to any instances increments the version number. Instances should generally be named after the environment the file will be deployed to.</p>
    
    <h2 id="security-and-permissions">Security and Permissions</h2>
    <p>Permissions may be assigned to users by associating an environment to a configuration file instance and granting or restricting any of the following tasks:</p>
    <ul>
        <li>Deploy</li>
        <li>Edit Instance</li>
        <li>View Instance</li>
    </ul>
    
    <h2 id="templating">Templating</h2>
    <p>Configuration file templates are designed to simplify deployment of configuration file instances that contain virtually identical content except for minor, environment-specific differences. The item that contains the placeholders for substitution is referred to as the template, and the item that contains the substitution values is referred to as the template instance. BuildMaster supports 3 types of transform syntaxes:</p>
    <h3>Key-Value Pair</h3>
    <p>Template instances are specified as newline-separated key-value pairs, and each key-value pair is separated by an equals sign. Additional equals signs on the same line are permitted and included in the replacement value. If the value requires a newline, the <code>$NewLine</code> variable function may be used.</p>
    <inedo:tab-block>

        <tab name="Template">

<pre>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;appSettings&gt;
    &lt;add key="Core.DbConnectionString" value="$ConnectionString" /&gt;
    &lt;add key="IntegratedWebServer.Enabled" value="True" /&gt;
&lt;/appSettings&gt;
</pre>
        </tab>
        <tab name="Template Instance">
            <code>ConnectionString=Data Source=localhost;Initial Catalog=BuildMaster;Integrated Security=SSPI;</code>
        </tab>
        <tab name="Result">
<pre>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;appSettings&gt;
    &lt;add key="Core.DbConnectionString" value="Data Source=localhost;Initial Catalog=BuildMaster;Integrated Security=SSPI;" /&gt;
    &lt;add key="IntegratedWebServer.Enabled" value="True" /&gt;
&lt;/appSettings&gt;
</pre>
        </tab>
    </inedo:tab-block>

    <h3>XSLT</h3>
    <p>Templates or their instances may be used as XSLT stylesheets and XML data that will be automatically transformed before deployment. In most cases, "XSL Stylesheet as Template" is the desired transform option because the XML data would be stored in the template instances.</p>
    
    <inedo:tab-block>
        <tab name="Data">
            <pre>
&lt;?xml version="1.0" ?&gt;
&lt;config&gt;
    &lt;connection&gt;
        &lt;value&gt;https://example.org/v1/service1&lt;/value&gt;
    &lt;/connection&gt;
    &lt;connection&gt;
        &lt;value&gt;https://example.org/v1/service2&lt;/value&gt;
    &lt;/connection&gt;
    &lt;connection&gt;
        &lt;value&gt;https://example.org/v1/service3&lt;/value&gt;
    &lt;/connection&gt;
&lt;/config&gt;
    </pre>
        </tab>
        <tab name="Stylesheet">
            <pre>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"&gt;

    &lt;xsl:output method="xml" indent="yes" encoding="UTF-8" /&gt;

    &lt;xsl:template match="/config"&gt;
        &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Testing XML Example&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Connections&lt;/h1&gt;
            &lt;ul&gt;
                &lt;xsl:apply-templates select="connection"&gt;&lt;/xsl:apply-templates&gt;
            &lt;/ul&gt;
        &lt;/body&gt;
    &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="connection"&gt;
    &lt;li&gt;
        &lt;xsl:value-of select="value" /&gt;
    &lt;/li&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
      </pre>
        </tab>
        <tab name="Result">
            <pre>
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;title&gt;Testing XML Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Connections&lt;/h1&gt;
    &lt;ul&gt;
        &lt;li&gt;https://example.org/v1/service1&lt;/li&gt;
        &lt;li&gt;https://example.org/v1/service2&lt;/li&gt;
        &lt;li&gt;https://example.org/v1/service3&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
      </pre>
        </tab>
    </inedo:tab-block>

    <h2 id="variable-replacement">Variable Replacement</h2>
    <p>All configuration variables, runtime variables, and parameterless variable functions in context are considered when variable replacement occurs before deployment and follows the same resolution rules as <a href="/support/documentation/buildmaster/global-components/configuration-variables">configuration variable replacement</a>. </p>
    <p>Template file variables are treated as runtime variables when replacement occurs, and therefore override any configuration variables. In practice, it is not recommended to have template instance variables override existing configuration variables or variable functions. It is also not recommended to rely on runtime variables created during a deployment.</p>
    
    <h3>Empty/Missing Variables</h3>
    <p>Variables or functions that exist but do not have any value (e.g. <code>$DeployableName</code> when no deployable is in context) will be replaced with an empty string, and variables that do not exist will remain as literal strings. It is not recommended to have a configuration file that falls into either of these cases.</p>
    
    <h3>Escaping Variables</h3>
    <p>There are many cases where a configuration file needs to contain literal text that appears to be a variable name. In this case, escape any $ signs with another $, e.g. <code>$$DoNotProcess</code>.</p>
    
    <h2 id="deployment">Deployment</h2>
    
    <h3>Automated Plan-Based Deployment</h3>
    <p>The most common method of deployment is the Deploy Configuration File operation (<code>Deploy-ConfigFile</code> in OtterScript). When this operation is executed during a deployment, the version of the configuration file instance associated with the release currently in context will be deployed to the target path. If there is an existing file at the target path, it will only be overwritten if its text contents are different than the configuration file text in BuildMaster, otherwise the operation effectively becomes a no-op.</p>
    <h3>Manual One-Off Deployment</h3>
    <p>Configuration files may also be deployed outside the context of a deployment. It is not generally recommended to deploy configuration files in this manner because much of the context associated with the plan-based deployment is lost (e.g. release number, package number). One-off deployments should be reserved for "emergency" cases that require a configuration change immediately without the overhead of the traditional release cycle.</p>
    
    <h2 id="history">History</h2>
    <p>Deployment history for configuration file instances is stored for configuration files deployed from BuildMaster. The instance, version number, user, and date of deployment is visible, as well as the ability to compare arbitrary versions to highlight what changes were made to an instance.</p>
    
    <h2 id="association-with-releases">Association with Releases</h2>
    <p>A release may be associated with a specific version of a configuration, or if unspecified, associated with the latest version. By default, a release is associated with the latest configuration file version. When a release is deployed to the final stage in a pipeline, the current latest configuration file version will become associated with that release to preserve the contents at that point in time, facilitating future rollbacks if necessary.</p>
    
    <h2 id="legacy-notes">Legacy Notes</h2>
    <em>This section applies to installations that have used legacy variable syntax (i.e. %-style).</em>
    <p>Prior to BuildMaster v4.2, variable substitutions used percent signs for variable replacement, e.g. <code>%RELNO%</code>. In v4.2, a new syntax was added to resemble more common languages like Bash and PowerShell, so <code>%RELNO%</code> could be written as <code>$ReleaseNumber</code>. In v5.0, OtterScript was introduced which has its own variable syntax that includes lists and maps, however for string variables it behaves similarly enough to the v4.2 syntax in most cases.</p>
    <p>Going forward, it is recommended to remove all uses of %-style variables from configuration files as this variable syntax will be removed in v6.0. Attempting to deploy a configuration file from an OtterScript plan that contains any %-style variables will not replace them, and generate an execution warning if the "Legacy plan variable support" setting for the configuration file's application is not set to "New format only" (otherwise a debug message will be logged for informational purposes).</p>

    
</body>
</html>