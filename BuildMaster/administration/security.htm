<html>
  <head>
    <title>Security and Privileges</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
      <meta name="keywords" content="BuildMaster,permissions" />
  </head>
  <body>
      <h1>Users and Groups in BuildMaster </h1>
      <p>
          Users and Group add a level of granular control and security within BuildMaster. 
          By associating users with a group or groups, organization are able to permit and restrict access as needed. 
      <p>
          A user directory is a collection of users and groups that BuildMaster can query. 
          Currently, BuildMaster supports three types of user directories:
      </p>
      <ul>
          <li>
             Built-In - The default basic user account system used by new installs of BuildMaster.
          </li>
          <li>
             LDAP/Single Domain AD - Users and groups from an LDAP
              directory are used, such as an Active Directory domain.
          </li>
          <li>
            AD Domain Forest - Users and groups from multiple domains
              in an Active Directory forest are used.
          </li>
      </ul>
      <p>
          Directories are exclusive; meaning you can only use one at a time. 
          For this reason, it’s important to make sure you will have sufficient administer permissions in BuildMaster for the user directory you are switching to. 
          If you do accidentally lock yourself out, don’t worry; you can easily run the BuildMaster.Service.exe program, and select the reset to Built-In option.
      </p>
      <h2 id="tasks">Tasks </h2>
      <p>
          BuildMaster allows you to create and customizes as many tasks as needed. 
          Tasks in BuildMaster define the specific ability, access, and functions users or group are allowed to edit, create, and view. 
          BuildMaster comes built-in with five tasks out of the box: Administer, Coordinate Releases, Deploy to Environment, Manage Application, and View Application. 
          Built-in task can be edited and modified but it’s important to note that future updates may affect these built-In tasks.
      </p>
    
          <img class="screenshot" src="/resources/documentation/buildmaster/builtin-task.png" alt="Creating a Task in BuildMaster"/>
      </p>
      <p>
          Administrators can assign restrictions and permissions based on a group and individual users. 
          It’s important to note that permissions are additive and restrictions override permission when they’re at the same level; 
          the more specific personnel (One user vs. Group) or a more defined scope (production vs. all environments) always override.
      </p>
      <h2 id="task-example">
         For Example
      </h2>
      <p>
          Tasks may be scoped at the environment and/or application level. 
          In the example below, Karl is a member of the DevTeam and is the only user who has the permission to deploy to the <em>Production</em> environment for the <em> Accounts</em> application. 
          The Accounts application is likely a mission critical app and therefore the enterprise has added strict restrictions, with only Karl given the permission for deployment in the Production environment.   
      </p>
      <p>
          <img class="screenshot" src="/resources/documentation/buildmaster/security-users-groups.png" alt="Permission and restrictions per User" />
      </p>
      <p>
          Everyone in the <em> Release managers</em> group are able to Coordinate Releases and Manage application because permission are additive and the scope is set at system wide level.  
      </p>
      <h2 id="api-keys">API Access &amp; API Keys</h2>
      <p>
          API Keys are designed to grant access to other tools and integrations. You can control which functionality a key may be used for, and delete
          keys that are not used.
      </p>
      <p class="announcement">Granting access to the <a href="../reference/api#native">Native API</a> will effectively allow for full control of the instance</p>
      <p>
         <img class="screenshot" src="/resources/documentation/buildmaster/api-key.png" alt="API Keys in BuildMaster" /> 
      </p>
      <p>
          To assist with debugging API usage, the request/response is logged whenever an API endpoint is accessed with a key. These logs are not retained indefinitely,
          but are automatically purged.
      </p>
      <p>
          An API key may be passed to an endpoint in one of four ways, depending on the content type of the expected request:
      </p>
      <ul>
          <li>Request header (<code>X-ApiKey</code>) - all content types</li>
          <li>Querystring value (<code>key</code>) - all content types</li>
          <li>Form value (<code>key</code>) - only <code>application/x-www-form-urlencoded</code> content type</li>
          <li>JSON property (<code>API_Key</code>) on root object - only <code>application/json</code> content type</li>
      </ul>
     
  </body>
</html>