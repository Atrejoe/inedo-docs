<html>
<head>
    <title>Configuration Variables </title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="otter,executions" />
</head>
<body>
    <p>
        Variables add flexibility when modeling infrastructure and creating <a href="/support/documentation/otter/core-concepts/plans">Plans</a>.
        Configuration Variables allow you to run the same plan differently on different servers.
    </p>

    <p>
        You can define configuration variables at different scopes (<a href="/support/documentation/otter/core-concepts/servers">Server</a>, <a href="/support/documentation/otter/modeling-infrastructure/server-roles">Server Role</a>, 
        <a href="/support/documentation/otter/modeling-infrastructure/environments">Environment</a>, or global), and then reference those variables in your plan, when using
        <a href="/support/documentation/otter/reference/operations">Operations</a>, <a href="/support/documentation/otter/execution-engine/statements-and-blocks/if-else">If/Else Blocks</a>, 
        <a href="/support/documentation/otter/execution-engine/statements-and-blocks/loop">Loop Blocks</a>, etc.
        You can also create <a href="../execution-engine/runtime-variables">Runtime Variables</a> in a plan itself.
	</p>
	<h2 id="cascading">
		Cascading Variables
	</h2>
    <p>
        Configuration Variables cascade, which means that you can define a variable of the same name in multiple places,
        and the correct value will be resolved at runtime. For example, if you define a variable named <code>$HDarsPath</code>
        on the <code>Testing</code> environment, when an orchestration or configuration plan runs against a server in the
        <code>Testing</code> environment, that variable will resolve at runtime.
    </p>
    <p>
        If you also defined <code>$HDarsPath</code> on a single server in the <code>Testing</code> environment, than <em>that</em>
        value would be used instead.
	</p>
    <p>
        This allows for reusing plans and templates without having to change local variables. 
    </p>
    <h3 id="rules">Resolution Rules</h3>
    <p>The variable definition that's the "closest" match to the current context is used. This is determined as follows.</p>
    <ul>
        <li>Job</li>
        <li>Server</li>
        <li>Environment</li>
        <li>Server Role</li>
        <li>Global</li>
    </ul>
    <h3 id="scopes">Multiple Scopes</h3>
    <p>
        You can also assign multiple scopes to a configuration variable; for example, you could define a variable that's associated
        with <em>both</em> the <code>Testing</code> environment and the <code>hdars-web</code> role. A multi-scope variable simply
        adds precedence to the highest-scope (<a href="/support/documentation/otter/core-concepts/jobs">Job</a> is still "closer" than a server or server role).
    </p>
    <p>
        However, this get can become confusing as the resolution rules are simply not intuitive. We generally discourage this
        use. You can only create multi-scoped variables from the administration section, and they are visible (but not editable)
        on the servers, server roles, etc., they are associated with.
    </p>    
</body>
</html>