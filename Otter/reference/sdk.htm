<html>
  <head>
    <title>Otter SDK</title>
      <meta name="subtitle" content="Otter SDK" />
      <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
      <meta name="sequence" content="500" />
      <meta name="keywords" content="otter,sdk" />
  </head>
  <body>
      <p>
          The Otter SDK allows you to create your own custom extensions using .NET code. There are 2 ways to get started with the Otter SDK:
      </p>
      <ul>
          <li>
              Reference the <a href="http://nuget.org/packages/Inedo.Otter.SDK" target="_blank">Inedo.Otter.SDK NuGet package</a>
              available on nuget.org
          </li>
          <li>Download the assemblies and reference them manually in your .NET project</li>
      </ul>

      <p>For a complete type reference of the SDK, please visit the <a href="/support/sdk-reference/otter">Otter SDK Reference</a>.</p>

      <h2 id="guide">Writing a Simple Operation</h2>
      <p>
          You can easily add new operations to Otter using any .NET language. 
      </p>
      <h3 id="example">Example: Creating an Execute Operation</h3>
      <p>
          Otter has a number of different types of operations, the simplest of which to develop is
          an <b>execute</b> operation. An execute operation does not collect or ensure any configuration,
          it simply <i>does something</i>, and is generally only used as part of an orchestration plan.
      </p>
      <p>
          Follow this guide to create a simplified version of the <b>Create File</b> operation
          that is already included in Otter.
      </p>

      <h4 id="creating-project">Creating the Project</h4>
      <p>
          First, create a new class library project in Visual Studio, and target .NET 4.5. Use NuGet
          to add a reference to the <b>Inedo.Otter.SDK</b> package.
      </p>
      <p class="info">
          Make sure that the SDK assemblies added by the NuGet package have the <b>Copy Local</b>
          property set to <b>False</b>. SDK assemblies should <i>not</i> be included in the extension.
      </p>

      <h4 id="create-operation">Creating the Operation</h4>
      <p>
          Next, create a new public class called <code>CreateFileOperation</code>, and have it inherit
          the <a href="/support/sdk-reference/otter/Inedo.Otter.Extensibility.Operations/ExecuteOperation"><code>ExecuteOperation</code></a> class:
      </p>
<pre>
<span class="code-keyword">public class</span> CreateFileOperation : ExecuteOperation
{
}
</pre>

      <p>
          Since this operation is supposed to create a file, it would be nice if we could access
          the file name and what to put in the file as inputs. To do this, just add a couple of properties and attributes:
      </p>
<pre>
[Required]
[ScriptAlias("Name")]
[DisplayName("File name")]
public string FileName { get; set; }

[ScriptAlias("Text")]
[DisplayName("Contents")]
[Description("The contents of the file. If this value is missing or empty, a 0-byte file will be created.")]
public string FileText { get; set; }
</pre>

      <p>
          Here's what everything means:
      </p>
      <ul>
          <li>
              <b>[<a href="/support/sdk-reference/otter/Inedo.Documentation/RequiredAttribute">Required</a>]</b> - the user must supply a value for this property for the plan to validate
          </li>
          <li>
              <b>[<a href="/support/sdk-reference/otter/Inedo.Otter.Extensibility/ScriptAliasAttribute">ScriptAlias(name)</a>]</b> - this is what the name of the property will look like to OtterScript;
              this value is required and must be unique to the type of operation
          </li>
          <li>
              <b>[DisplayName(name)]</b> - this is displayed in the graphical plan editor to provide a friendlier
              name than the script alias; this is optional
          </li>
          <li>
              <b>[Description(text)]</b> - another optional attribute that provides some additional help
              text in the graphical editor
          </li>
      </ul>

      <p>
          Now that the inputs are configured, write the code that will actually create the file:
      </p>
<pre>
public override async Task ExecuteAsync(IOperationExecutionContext context)
{
	var path = PathEx.Combine(context.WorkingDirectory, this.FileName);
	var fileOps = context.Agent.GetService&lt;IFileOperationsExecuter&gt;();
	this.LogDebug($"Creating {path}...");

	await fileOps.CreateDirectoryAsync(PathEx.GetDirectoryName(path));
	await fileOps.WriteAllTextAsync(path, this.Text ?? "");

	this.LogInformation(this.FileName + " file created.");
}
</pre>

      <p>
          Although the <a href="/support/sdk-reference/otter/Inedo.Otter.Extensibility.Operations/ExecuteOperation/ExecuteAsync(IOperationExecutionContext)">ExecuteAsync</a> method isn't doing too much, we'll break everything down right here:
      </p>
      <ul>
          <li>
              <b>async</b><br />
              The <b>async</b> keyword in the method declaration instructs
              the compiler to allow the <b>await</b> keyword in the method body. Otter
              operations can execute asynchronously; if you don't know what this means, consider
              reading <a href="https://msdn.microsoft.com/en-us/library/hh191443.aspx">this MSDN article</a>.
              If you would prefer to implement <b>ExecuteAsync</b> synchronously, you can just omit
              the <b>async</b> keyword and return the static <b>Complete</b> property when the method
              is complete.
          </li>

          <li>
              <b>var path = PathEx.Combine(context.WorkingDirectory, this.FileName);</b><br />
              This allows a relative path to be used for the <b>FileName</b> property.
              Without it, the operation would only work correctly when a user supplies
              an absolute path. Note that absolute paths will still work; if the
              second argument of <b>PathEx.Combine</b> is absolute, the first argument
              is ignored.
          </li>

          <li>
              <b>var fileOps = context.Agent.GetService&lt;IFileOperationsExecuter&gt;();</b><br />
              This requests a <b><a href="/support/sdk-reference/otter/Inedo.Agents/IFileOperationsExecuter">IFileOperationsExecuter</a></b> service from the
              Otter agent in the current context. This interface is an abstraction
              that allows a common set of file system operations on either hosted
              or SSH agents.
          </li>

          <li>
              <b>await fileOps.CreateDirectoryAsync(PathEx.GetDirectoryName(path));</b><br />
              This is a simple way to ensure that the directory exists where
              we are trying to write the file.
          </li>

          <li>
              <b>	await fileOps.WriteAllTextAsync(path, this.Text ?? "");</b><br />
              This actually writes the desired text to the file.
          </li>
      </ul>
      <p class="info">
          For brevity, we've left out the logging messages; but those are pretty self-explanatory.
          Anything logged will be associated with the current operation.
      </p>

      <p>
          Now apply a few attributes to the operation itself to make it discoverable to Otter:
      </p>
<pre class="tutorial-code">
[DisplayName("Create File (Example)")]
[Description("Creates a file on a server.")]
[ScriptAlias("Create-File-Example")]
[ScriptNamespace("HDARS")]
[Tag("files")]
[DefaultProperty(nameof(FileName))]
<span class="code-keyword">public class</span> CreateFileOperation : ExecuteOperation
{
}
</pre>

      <p>
          The meaning of <b>DisplayName</b>, <b>Description</b>, and <b>ScriptAlias</b>
          is the same as for properties. As for the other attributes:
      </p>
      <ul>
          <li>
              <b><a href="/support/sdk-reference/otter/Inedo.Otter.Extensibility/ScriptNamespaceAttribute">ScriptNamespace</a></b> - specifies a prefix that is used to qualify the
              name specified in <b>ScriptAlias</b>. For convenience, this attribute
              can also be applied to the assembly rather than on each operation individually.
          </li>
          <li>
              <b><a href="/support/sdk-reference/otter/Inedo.Documentation/TagAttribute">Tag</a></b> - specifies a tag which acts as a kind of category for the operation.
              This attribute can be applied multiple times and can help with discoverability.
          </li>
          <li>
              <b>DefaultProperty</b> - specifies the name of a property on the operation
              that receives the default argument value. When in script form, the default argument
              is the value this is passed to the operation positionally, rather than by name.
              A default is not necessary, but can help increase the readability of a plan
              when it is viewed or edited as OtterScript.
          </li>
      </ul>

      <h4 id="build-deploy">Building and Deploying the Extension</h4>
      <p>
          With the operation complete (and compiling), it is now ready to be packaged as an extension, and deployed to Otter. To do this, create a zip file with the same name as the assembly. For example, if the assembly name is MyExample.dll, call the zip file MyExample.zip.
      </p>
      <p>
          Next, add the .dll file to the zip file, then rename the zip file so that its
          extension is <b>.otterx</b>.
      </p>
      <p>
          Copy the <b>.otterx</b> file into the Otter extensions directory. By default,
          this will usually be in <b>C:\ProgramData\Otter\Extensions</b>, but you can
          verify the exact location by going to the Admin->All Settings page in Otter
          and looking for the <b>ExtensionsPath</b> value.
      </p>
      <p>
          Restart the Otter services (and application pool if hosting in IIS).
      </p>

      <h4 id="test-extension">Testing the Extension</h4>
      <p>
          Go to any plan editor in Otter and verify that your new operation is displayed
          along with all of the other operations. This create file operation should work
          on any server, just like the built-in version.
      </p>

  </body>
</html>