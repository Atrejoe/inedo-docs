<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Asset Directory API</title>
    <meta name="subtitle" content="Asset Directory API" />
    <meta name="keywords" content="proget,api,packages" />
    <style type="text/css">
        th {
            font-weight: normal;
            font-style: italic;
        }
    </style>
</head>
<body>
    <p>
        The Asset Directory API provides simple RESTful access to all asset storage capabilities.
        Like feeds, asset directories expose their APIs through the URL /endpoints/&laquo;AssetDirectoryName&raquo;/...
    </p>

    <h2>Content API</h2>
    <p>
        The Asset Content API is accessible under /endpoints/&laquo;AssetDirectoryName&raquo;/content/..., and provides the primary
        access point for working with assets. This endpoint is designed to function like a standard web server, so hosted assets
        can be accessed by simple GET requests with support for browser caching.
    </p>

    <h3 id="get-asset">Get Asset Endpoint</h3>
    <p class="info">GET <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>

    <p>
        Gets the asset at the specified path, returning it as content.
        This endpoint returns a status of 200 (success), 304 (success, not modified), 404 (asset not found), 401 (auth required), 403 (access denied).
    </p>
    <p>
        On success, the asset is returned as content.
    </p>

    <h3 id="test-asset">Test for Asset Endpoint</h3>
    <p class="info">HEAD <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>

    <p>
        Returns the headers only for the GET endpoint. This can be used to determine if an asset exists.
        This endpoint returns a status of 200 (success), 304 (success, not modified), 404 (asset not found), 401 (auth required), 403 (access denied).
    </p>
    <p>
        Note that as this is a HEAD request, there is no content in the response.
    </p>

    <h3 id="post-asset">Create or Replace Asset Endpoint</h3>
    <p class="info">POST <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>
    <p>
        Creates a new asset (or overwrites an existing asset) at the specified path using the request content as the asset.
        This endpoint returns a status of 201 (success), 401 (auth required), 403 (access denied).
    </p>
    <p>
        On success, the asset is saved to the asset directory.
    </p>

    <h3 id="put-asset">Create Asset Endpoint</h3>
    <p class="info">PUT <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>
    <p>
        Creates a new asset (but <b>will not</b> overwrite an existing asset) at the specified path using the request content as the asset.
        This endpoint returns a status of 201 (success), 400 (asset already exists), 401 (auth required), 403 (access denied).
    </p>
    <p>
        On success, the asset is saved to the asset directory.
    </p>

    <h3 id="patch-asset">Replace Asset Endpoint</h3>
    <p class="info">PATCH <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>
    <p>
        Overwrites an existing asset at the specified path using the request content as the asset.
        This endpoint returns a status of 201 (success), 404 (asset not found), 401 (auth required), 403 (access denied).
    </p>
    <p>
        On success, the existing asset is replaced.
    </p>

    <h3 id="delete-asset">Delete Asset Endpoint</h3>
    <p class="info">DELETE <span style="opacity: 0.5;">.../content/&laquo;path_to_asset&raquo;</span></p>
    <p>
        Deletes the asset at the specified path. The path must refer to an invidual asset and not a directory.
        It is not considered an error to delete a file that does not exist.
        This endpoint returns a status of 200 (success), 400 (path refers to a directory), 401 (auth required), 403 (access denied).
    </p>
    <p>
        On success, the asset is deleted from the asset directory.
    </p>

    <h2>Directory API</h2>
    <p>
        The Asset Directory API is accessible under /endpoints/&laquo;AssetDirectoryName&raquo;/dir/..., and extends the Content
        API by providing explicit endpoints for working with directories.
    </p>

    <h3 id="list-dir">List Directory Endpoint</h3>
    <p class="info">GET <span style="opacity: 0.5;">.../dir/&laquo;path&raquo;?recursive=&laquo;true/false&raquo;</span></p>
    <p>
        Returns all assets and directories in the specified path as an array of JSON items.
        When <b>recursive</b> is false or not specified, only items contained in the specified path are returned.
        When <b>recursive</b> is true, all items in subdirectories are also returned.
        This endpoint returns a status of 200 (success), 404 (directory not found), 401 (auth required), 403 (access denied).
    </p>
    <h4>Data Specification</h4>
    <inedo:tab-block>
        <tab name="Asset Item">
            <table>
                <thead>
                    <tr>
                        <th>Property</th>
                        <th>Format</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>name</code></td>
                        <td>
                            A <em>string</em> containing the local name of the asset. This property does <b>not</b> include the full path.
                        </td>
                    </tr>
                    <tr>
                        <td><code>parent</code></td>
                        <td>
                            A <em>string</em> containing the full path of the parent directory of the asset. This property does <b>not</b>
                            include the name of the asset itself. This property may be omitted if the asset is contained in the directory root.
                        </td>
                    </tr>
                    <tr>
                        <td><code>type</code></td>
                        <td>
                            A <em>string</em> containing either the Content-Type of the the asset, or the literal text <b>dir</b>
                            if the item represents a subdirectory.
                        </td>
                    </tr>
                    <tr>
                        <td><code>created</code></td>
                        <td>
                            A <em>string</em> containing the UTC date of the original creation time of the item in ISO 8601 format (yyyy-MM-ddThh:mm:ss).
                        </td>
                    </tr>
                    <tr>
                        <td><code>modified</code></td>
                        <td>
                            A <em>string</em> containing the UTC date of the last time of the item was updated in ISO 8601 format (yyyy-MM-ddThh:mm:ss).
                            This property is omitted if the item represents a subdirectory.
                        </td>
                    </tr>
                    <tr>
                        <td><code>size</code></td>
                        <td>
                            A <em>number</em> specifying the number of bytes in size of the asset item.
                            This property is omitted if the item represents a subdirectory.
                        </td>
                    </tr>
                    <tr>
                        <td><code>sha1</code></td>
                        <td>
                            A <em>string</em> containing the SHA1 hash of the asset item.
                            This property is omitted if the item represents a subdirectory.
                        </td>
                    </tr>
                </tbody>
            </table>
        </tab>
    </inedo:tab-block>
    <p>
        On success, a JSON array of the above objects is returned.
    </p>

    <h3 id="create-dir">Create Directory Endpoint</h3>
    <p class="info">POST <span style="opacity: 0.5;">.../dir/&laquo;path&raquo;</span></p>
    <p>
        Creates a directory at the specified path. If any of the parent directories do not exist, they will be created as well.
        It is not an error if the directory already exists.
        This endpoint returns a status of 201 (success), 401 (auth required), 403 (access denied).
    </p>

    <h2>Delete API</h2>
    <p>
        The Asset Delete API is accessible under /endpoints/&laquo;AssetDirectoryName&raquo;/delete/..., and further extends the Content
        API by providing explicit endpoints for deleting items without using an HTTP DELETE request.
    </p>

    <h3 id="delete-item">Delete Item Endpoint</h3>
    <p class="info">POST <span style="opacity: 0.5;">.../delete/&laquo;path&raquo;?recursive=&laquo;true/false&raquo;</span></p>
    <p>
        Deletes the asset or directory at the specified path.
        When <b>recursive</b> is false or not specified and the path refers to a directory, the directory will only be deleted if it is empty.
        When <b>recursive</b> is true, the item and all of its contents (if it is a directory) will be deleted.
        It is not an error if the directory does not exist.
        This endpoint returns a status of 200 (success), 400 (directory not empty and recursive=false), 401 (auth required), 403 (access denied).
    </p>

    <h2>Export API</h2>
    <p>
        The Asset Export API is accessible under /endpoints/&laquo;AssetDirectoryName&raquo;/export/..., and provides endpoints
        for downloading batches of assets at once.
    </p>

    <h3 id="export-dir">Export Directory Endpoint</h3>
    <p class="info">GET <span style="opacity: 0.5;">.../export/&laquo;path&raquo;?format=&laquo;zip/tgz&raquo;&amp;recursive=&laquo;true/false&raquo;</span></p>
    <p>
        Returns the contents of the specified directory as either a ZIP or a TGZ archive.
        The <b>format</b> argument may be either <b>zip</b> (for a zip file) or <b>tgz</b> for a GZipped tar file.
        When <b>recursive</b> is false or not specified, only items contained directly in the specified path are included.
        When <b>recursive</b> is true, the archive will contain all subdirectories as well.
        This endpoint returns a status of 200 (success), 404 (directory not found), 400 (invalid format), 401 (auth required), 403 (access denied).
    </p>

    <h3 id="import-dir">Import Directory Endpoint</h3>
    <p class="info">POST <span style="opacity: 0.5;">.../import/&laquo;path&raquo;?format=&laquo;zip/tgz&raquo;&amp;overwrite=&laquo;true/false&raquo;</span></p>
    <p>
        Adds the contents of the uploaded archive to the specified path.
        The <b>format</b> argument may be either <b>zip</b> (for a zip file) or <b>tgz</b> for a GZipped tar file.
        When <b>overwrite</b> is false or not specified, items already in the asset directory will never be overwritten.
        When <b>overwrite</b> is true, items in the asset directory will be overwritten.
        If the specified directory does not exist, it will be created.
        This endpoint returns a status of 200 (success), 400 (invalid format), 401 (auth required), 403 (access denied).
    </p>
</body>
</html>